<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chit Chat</title>
    <link rel="stylesheet" href="/css/output.css">
    <!-- FontAwesome CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .tooltip:not(.shown) {
            display: none;
        }

        details>summary {
            list-style: none;
        }

        details>summary::-webkit-details-marker {
            display: none;
        }
    </style>
</head>

<body>
    <% if (locals.error) { %>
        <p class="text-red-500  text-xs italic">
            <%= error %>
        </p>
        <% } %>
            <div class="mx-auto rounded-lg h-screen flex flex-col">
                <%- include('includes/header.ejs',{profileImg:profile.profile.profileImg}) %>
                    <div class="flex bg-white flex-grow" style="height: calc(100vh - 96px);">
                        <%- include('includes/chatList.ejs',{contacts:contacts}) %>
                            <%- include('includes/chat.ejs' , {profile:profile, chat:chat} ) %>
                    </div>
            </div>
</body>

<script src="/socket.io/socket.io.js"></script>

<!-- Performing Pre-Requiesets -->
<script>
    //scrolling to bottom
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelector(".chat").scrollTo(0, document.body.scrollHeight)
    });
    //Acquiring Socket Io and other DOM elements                
    const socket = io()
    const message = document.querySelector('.message');
    const send = document.querySelector('.send');
    const messages = document.querySelector('.chatscontainer')
    const typingIndicator = document.getElementById('typingIndicator');
    const tooltip = document.querySelector('.tooltip')

    let typingTimeout;

    const sender = `<%=profile._id%>`
    const reciever = `<%=user._id%>`
</script>
<!-- Emoji Picker Logic -->
<script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@^1/index.js"></script>
<script type="module" src="/js/emoji.js"></script>
<!-- Socket.io -->
<!-- initial Emit and Typing event -->
<script>
    //Initial Join
    socket.emit("join", sender)
    //Sending Texting and stop event
    message.addEventListener('input', () => {
        socket.emit("texting", {
            sendTo: reciever,
            msg: message.value
        })
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
            socket.emit('stop typing', {
                sendTo: reciever,
                msg: message.value
            });
        }, 1000); // Emit stop typing event after 1 second of inactivity
    })
    // When recieved texting event
    socket.on("texting", () => {
        typingIndicator.innerText = `Typing...`;
    })
    //When recieved stop event
    socket.on('stop typing', (data) => {
        typingIndicator.innerText = '';
    });
</script>

<!-- Sharing and recieving message -->
<script>
    // sending Message
    send.addEventListener('click', (e) => {
        e.preventDefault()
        if (!message.value) return
        socket.emit("privateMessage", {
            content: message.value,
            sendTo: reciever,
            sentBy: sender
        })
        message.value = ""
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelector(".chat").scrollTo(0, document.body.scrollHeight)
        });
        tooltip.classList.remove('shown')
    });
    //On recieveing Private Message from other user
    socket.on("privateMessage", ([content, sentBy]) => {
        if (sentBy == reciever) {
            messages.innerHTML += `
                            <div class="flex justify-start mb-4">
                                <div class="ml-2 py-3 px-4 bg-gray-400 rounded-br-3xl rounded-tr-3xl rounded-tl-xl text-white">
                                    <pre class="whitespace-pre-wrap">${content}</pre>
                                </div>
                            </div>
                            `
        }
    })
    //To print your message on screen
    socket.on("ownMessage", (msg) => {
        messages.innerHTML += `
                        <div class="flex justify-end mb-4">
                            <div class="mr-2 py-3 px-4 bg-blue-400 rounded-bl-3xl rounded-tl-3xl rounded-tr-xl text-white">
                                <pre class="whitespace-pre-wrap">${msg}</pre>
                            </div>
                        </div>
                        `
    })
</script>

<!-- Sharing and recieving Image -->
<script>
    document.querySelector(".shareImage").addEventListener("click", (e) => {
        let input = document.getElementById('file-upload');
        let file = input.files[0];
        if (!file) return
        const reader = new FileReader();

        reader.onload = function (e) {
            const arrayBuffer = e.target.result;
            const fileName = `${Date.now()}-${file.name}`;
            socket.emit('privateImage', {
                data: arrayBuffer,
                sendTo: reciever,
                sentBy: sender,
                fileName: fileName
            }
            );
        };

        reader.readAsArrayBuffer(file);

        document.getElementById("imageDetails").open = false
        input.value = ""
        let preview = document.getElementById('preview');
        preview.classList.add("hidden")
        tooltip.classList.remove('shown')
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelector(".chat").scrollTo(0, document.body.scrollHeight)
        });
    })

    socket.on('privateImage', function ([data, sentBy]) {
        if (sentBy == reciever) {
            const blob = new Blob([data]);
            const url = URL.createObjectURL(blob);
            messages.innerHTML += `
                <div class="flex self-start mb-4 w-48 h-52 object-contain object-center">
                    <img src=${url} alt="photo">
                </div>
            `
        }
    });

    socket.on('ownImage', function (data) {
        const blob = new Blob([data]);
        const url = URL.createObjectURL(blob);
        messages.innerHTML += `
                <div class="flex self-end mb-4 w-48 h-52 object-contain object-center">
                    <img src=${url} alt="photo">
                </div>
            `
    });
</script>

</html>